imp
imp <- varimp$importance
imp
varimp
varimp[names]
varimp[1,]
varimp[0,]
dim(varimp)
size(varimp)
DIM(varimp)
dim(imp)
dim(varimp)
dim(imp)
imp
imp[0,]
imp[1,]
imp[,0]
imp[,1]
imp[,2]
imp[,1]
varimp[,1]
dim(imp)
dim(varimp)
imp
imp[order(imp$V1),]
imp$V1
imp[0,]
imp[,0]
imp[0,0]
imp[,1]
imp[0,1]
imp[,1]
imp[order(imp[,1]),]
imp[order(imp[,1], decreasing=TRUE)]
imp[order(imp[,1], decreasing=TRUE),]
imp[order(imp[,0], decreasing=TRUE),]
imp
imp[order(imp[,1], decreasing=TRUE),]
# Compare the final result (set of features) with the same number of features, that correlate the most with the target variable
result <- genes[, predictors(results)]
topCor <- imp[order(imp[,1], decreasing=TRUE),]
dim(topCor)
topCor
topCor <- imp[order(imp[,1], decreasing=TRUE),1]
topCor
imp[order(imp[,1], decreasing=TRUE),0]
imp[order(imp[,1], decreasing=TRUE),1]
topCor <- imp[order(imp[,1], decreasing=TRUE),2]
imp[order(imp[,1], decreasing=TRUE),2]
imp[,]
imp
dim(imp)
imp[,0]
imp[,1]
imp[1,]
imp[0,]
imp[2,]
imp[3,]
rownames(varimp$importance)
# Compare the final result (set of features) with the same number of features, that correlate the most with the target variable
result <- genes[, predictors(results)]
topCor <- rownames(imp[order(imp[,1], decreasing=TRUE),])
# Compare the final result (set of features) with the same number of features, that correlate the most with the target variable
result <- genes[, predictors(results)]
topCor <- rownames(imp[order(imp[,1], decreasing=TRUE),])
topCor <- topCor[0:19]
result
topCor
result
topCor
rownames(varimp$importance)
topCor
rownames(imp[order(imp[,1], decreasing=TRUE),])
rownames(varimp$importance)
imp[order(imp[,1], decreasing=TRUE),]
topCor <- rownames(imp)
result
topCor
result
varimp
varimp[varimp[order(varimp[,1], decreasing = TRUE),]
varimp[order(varimp[,1], decreasing = TRUE),]
varimp[,1]
varimp[,0]
varimp[1,]
varimp[0,]
varimp[order(imp[,1], decreasing = TRUE),]
varimp[order(imp[,1], decreasing = TRUE)]
varimp[order(varimp[,1], decreasing = TRUE)]
varimp[order(imp[,1], decreasing = TRUE)]
varimp[order(imp[,1], decreasing = TRUE)]
topCor <- rownames(varimp[order(imp[,1], decreasing = TRUE)])
topCor <- topCor[0:15]
result
topCor
topCor
result
topCor
topCor
topCor <- varimp[order(imp[,1], decreasing = TRUE)]
topCor
topCor
ImpMeasure <- data.frame(imp)
ImpMeasure$Vars <- row.names(ImpMeasure)
ImpMeasure[order(-ImpMeasure$Overall),][1:3,]
ImpMeasure <- data.frame(imp)
ImpMeasure$Vars <- row.names(ImpMeasure)
ImpMeasure[order(-ImpMeasure$Overall),][1:15,]
result
topCor
result
topCor
result
ImpMeasure <- data.frame(imp)
ImpMeasure$Vars <- row.names(ImpMeasure)
ImpMeasure[order(-ImpMeasure$Overall),][0:7,]
predictors(results)
varimp
# Compare the final result (set of features) with the same number of features, that correlate the most with the target variable
result <- genes[, predictors(results)]
topCor <- data.frame(imp)
topCor$Vars <- row.names(topCor)
topCor[order(-topCor$Overall),][0:7,]
topCor <- data.frame(imp)
topCor$Vars <- row.names(topCor)
topCor[order(-topCor$Overall),][0:7,]
cors <- genes[, topCor]
predictors(results)
topCor
topCor <- data.frame(imp)
topCor$Vars <- row.names(topCor)
topCor[order(-topCor$Overall),][0:7,]
cors <- genes[, topCor]
topCor <- data.frame(imp)
topCor$Vars <- row.names(topCor)
topCor[order(-topCor$Overall),][0:7,]
cors <- genes[, topCor]
topCor <- data.frame(imp)
topCor$Vars <- row.names(topCor)
topCor[order(-topCor$Overall),][0:7,]
topCor <- data.frame(imp)
topCor$Vars <- row.names(topCor)
topCor[order(-topCor$Overall),][0:7,]$Vars
predictors(results)
topCor <- data.frame(imp)
topCor$Vars <- row.names(topCor)
topCor[order(-topCor$Overall),][1:8,]$Vars
varimp
topCor <- data.frame(imp)
topCor$Vars <- row.names(topCor)
topCor[order(-topCor$Overall),][1:8,]$Vars
cors <- genes[, topCor]
topCor
topCor <- data.frame(imp)
topCor$Vars <- row.names(topCor)
topCor[order(-topCor$Overall),][1:8,]$Vars
topCor <- data.frame(imp)
topCor$Vars <- row.names(topCor)
topCor <- topCor[order(-topCor$Overall),][1:8,]$Vars
cors <- genes[, topCor]
result
cors
result
result
cors
cors
covariance <- cov(result, cors)
covariance
correlation <- cor(result, cors)
correlation
correlation <- cor(result, cors)
correlation
correlation <- cor(result, cors)
correlation
# Compare the final result (set of features) with the same number of features, that correlate the most with the target variable
result <- predictors(results)
topCor <- data.frame(imp)
topCor$Vars <- row.names(topCor)
topCor <- topCor[order(-topCor$Overall),][1:8,]$Vars
cors <- topCor
correlation <- cor(result, cors)
correlation
result
cors
cor(result, cors)
correlation <- cor(result, cors)
correlation
# Compare the final result (set of features) with the same number of features, that correlate the most with the target variable
result <- genes[, predictors(results)]
topCor <- data.frame(imp)
topCor$Vars <- row.names(topCor)
topCor <- topCor[order(-topCor$Overall),][1:8,]$Vars
cors <- genes[, topCor]
correlation <- cor(result, cors)
correlation
# How the number of features influence the accuracy
control <- rfeControl(functions = rfFuncs,
method = "repeatedcv",
number = 3,
verbose = FALSE)
outcomeName <- 'class'
predictors <- names(learn)[!names(learn) %in% outcomeName]
results <- rfe(learn[,predictors], learn[,outcomeName], rfeControl=control,
sizes = c(1, 2, 4, 6, 8, 12, 16, 20, 32, 64, 128, 256, 512, 1000))
results
cors
result
cors
correlation <- cor(result, cors)
correlation
install.packages("corrplot")
correlation <- cor(result, cors)
correlation
corrplot(corr, method="color")
correlation <- cor(result, cors)
correlation
corrplot(correlation, method="color")
correlation <- cor(result, cors)
correlation
corrplot(correlation, method="number")
correlation <- cor(result, cors)
correlation
corrplot(correlation, method="color")
color
correlation <- cor(result, cors)
correlation
corrplot(correlation, method="color")
correlation <- cor(result, cors)
correlation
corrplot(correlation, method="color")
corrplot(correlation, method="color")
correlation <- cor(result, cors)
correlation
corrplot(corr, method="color")
correlation <- cor(result, cors)
corrplot(corr, method="color")
correlation <- cor(result, cors)
corrplot(correlation, method="color")
correlation <- cor(result, cors)
corrplot(correlation, method="circle")
correlation <- cor(result, cors)
corrplot(correlation, method="number")
head(round(correlation,2))
head(round(correlation,2))
correlation <- head(round(cor(result, cors),2))
corrplot(correlation, method="number")
correlation <- head(round(cor(result, cors),2))
correlation
library(corrplot)
correlation <- head(round(cor(result, cors),2))
correlation
corrplot(correlation, method="number")
corrplot(correlation, method="color")
history_x
history_y
summary(GA2)
plot(GA2)
GA2 <- ga(type = "real-valued",
fitness =  function(x) f(x[1], x[2]),
lower = c(-1, -1), upper = c(1, 1),
popSize = 50, maxiter = 50*i, run = 100)
{res2 <- persp(x=x, y = y, z = z,theta = 30, phi = 25)
points(trans3d(x = history_x, y =history_y , z = f(history_x, history_y), pmat = res))
}
plot(GA2)
plot(GA)
plot(GA2)
plot(GA2)
topCor <- topCor[order(-topCor$Overall),][1:8,]$Vars
control <- rfeControl(functions = rfFuncs,
method = "repeatedcv",
number = 3,
verbose = FALSE)
outcomeName <- 'class'
predictors <- names(learn)[!names(learn) %in% outcomeName]
results <- rfe(learn[,predictors], learn[,outcomeName], rfeControl=control,
sizes = c(1, 2, 4, 6, 8, 12, 16, 20, 32, 64, 128, 256, 512, 1000))
results <- rfe(learn[,predictors], learn[,outcomeName], rfeControl=control,
sizes = c(1, 2, 4, 6, 8, 12, 16, 20, 32, 64, 128, 256, 512, 1000))
results
predictors(results)
plot(results)
control <- rfeControl(functions = rfFuncs,
method = "repeatedcv",
number = 3,
verbose = FALSE)
outcomeName <- 'class'
predictors <- names(learn)[!names(learn) %in% outcomeName]
results <- rfe(learn[,predictors], learn[,outcomeName], rfeControl=control,
sizes = c(1, 2, 4, 6, 8, 12, 16, 20, 32, 64, 128, 256, 512, 1000))
summary(results)
results
predictors(results)
plot(results)
points(trans3d(x = history_x[0], y =history_y[0] , z = f(history_x[0], history_y[0]), pmat = res, color = "green"))
points(trans3d(x = history_x[0], y =history_y[0] , z = f(history_x[0], history_y[0]), pmat = res, col = "green"))
points(trans3d(x = history_x[0], y =history_y[0] , z = f(history_x[0], history_y[0]), pmat = res, col = "red"))
points(trans3d(x = history_x[0], y =history_y[0] , z = f(history_x[0], history_y[0]), pmat = res), col = "red")
points(trans3d(x = history_x[0], y =history_y[0] , z = f(history_x[0], history_y[0]), pmat = res))
{res2 <- persp(x=x, y = y, z = z,theta = 30, phi = 25)
points(trans3d(x = history_x, y =history_y , z = f(history_x, history_y), pmat = res))
}
GA2
summary(GA2)
GA2@fitness
GA2@fitnessValue
plot(fitness, size)
fitness = c()
size = c()
for (i in 1:10) {
GA3 <- ga(type = "real-valued",
fitness =  function(x) f(x[1], x[2]),
lower = c(-1, -1), upper = c(1, 1),
popSize = 10*i, maxiter = 100, run = 100)
fitness[i] <- GA2@fitnessValue
size[i] = 10*i
}
plot(size, fitness)
fitness = c()
size = c()
for (i in 1:50) {
GA3 <- ga(type = "real-valued",
fitness =  function(x) f(x[1], x[2]),
lower = c(-1, -1), upper = c(1, 1),
popSize = i*2, maxiter = 30, run = 100)
fitness[i] <- GA2@fitnessValue
size[i] = i*2
}
plot(size, fitness)
plot(size, time)
for (i in 1:50) {
ptm <- proc.time()
GA3 <- ga(type = "real-valued",
fitness =  function(x) f(x[1], x[2]),
lower = c(-1, -1), upper = c(1, 1),
popSize = i*2, maxiter = 30, run = 100)
time[i] <- proc.time() - ptm
size[i] = i*2
}
time = c()
size = c()
for (i in 1:50) {
ptm <- proc.time()
GA3 <- ga(type = "real-valued",
fitness =  function(x) f(x[1], x[2]),
lower = c(-1, -1), upper = c(1, 1),
popSize = i*2, maxiter = 30, run = 100)
time[i] <- proc.time() - ptm
size[i] = i*2
}
plot(size, time)
time = c()
size = c()
for (i in 1:50) {
ptm <- proc.time()
GA3 <- ga(type = "real-valued",
fitness =  function(x) f(x[1], x[2]),
lower = c(-1, -1), upper = c(1, 1),
popSize = i*5, maxiter = 30, run = 100)
time[i] <- proc.time() - ptm
size[i] = i*5
}
plot(size, time)
source('~/.active-rstudio-document', echo=TRUE)
#We select a list of crossovers
crossovers = c("ga_spCrossover",
"gabin_spCrossover", "gabin_uCrossover",
"gareal_spCrossover", "gareal_waCrossover", "gareal_laCrossover", "gareal_blxCrossover", "gareal_laplaceCrossover",
"gaperm_cxCrossover", "gaperm_pmxCrossover", "gaperm_pmxCrossover"
)
results = c()
best <- 0
name <- 0
results = c()
best <- 0
name <- 0
```{r ga, echo=F}
#We train them all and then we select the best
for (i in 1:length(crossovers)) {
GA <- ga(type = "real-valued",
fitness =  function(x) f(x[1], x[2]),
lower = c(-1, -1), upper = c(1, 1),
popSize = 50, maxiter = 1000, run = 100,
crossover = crossovers[i]
)
if (best < GA@fitness) {
name <- crossovers[i]
best[1] <- GA@fitness
}
results[i] <- GA@fitness
}
best <- GA@fitness
results = c()
best <- 0
name <- 0
#We train them all and then we select the best
for (i in 1:length(crossovers)) {
GA <- ga(type = "real-valued",
fitness =  function(x) f(x[1], x[2]),
lower = c(-1, -1), upper = c(1, 1),
popSize = 50, maxiter = 1000, run = 100,
crossover = crossovers[i]
)
if (best < GA@fitness) {
name <- crossovers[i]
best <- GA@fitness
}
results[i] <- GA@fitness
}
if (best < GA@fitnessValue) {
name <- crossovers[i]
best <- GA@fitness
}
#We train them all and then we select the best
for (i in 1:length(crossovers)) {
GA <- ga(type = "real-valued",
fitness =  function(x) f(x[1], x[2]),
lower = c(-1, -1), upper = c(1, 1),
popSize = 50, maxiter = 1000, run = 100,
crossover = crossovers[i]
)
if (best < GA@fitnessValue) {
name <- crossovers[i]
best <- GA@fitness
}
results[i] <- GA@fitness
}
GA
summary(GA)
GA@fitnessValue
plot(GA)
summary(GA)
max_x = as.vector(GA@solution[1])
max_y = as.vector(GA@solution[2])
max_z = as.vector(f(GA@solution[1], GA@solution[2]))
{res <- persp(x = x, y = x, z = z,theta = 30, phi = 25)
points(trans3d(max_x, max_y, max_z, pmat=res))}
plot(GA)
summary(GA)
max_x = as.vector(GA@solution[1])
max_y = as.vector(GA@solution[2])
max_z = as.vector(f(GA@solution[1], GA@solution[2]))
{res <- persp(x = x, y = x, z = z,theta = 30, phi = 25)
points(trans3d(max_x, max_y, max_z, pmat=res))}
results = c()
idx <- 0
name <- 0
#We train them all and then we select the best
for (i in 1:length(crossovers)) {
GA <- ga(type = "real-valued",
fitness =  function(x) f(x[1], x[2]),
lower = c(-1, -1), upper = c(1, 1),
popSize = 50, maxiter = 1000, run = 100,
crossover = crossovers[i]
)
if (best < GA@fitnessValue) {
idx <- crossovers[i]
best <- GA@fitnessValue
}
results[i] <- GA@solution
}
best <- 0
#We train them all and then we select the best
for (i in 1:length(crossovers)) {
GA <- ga(type = "real-valued",
fitness =  function(x) f(x[1], x[2]),
lower = c(-1, -1), upper = c(1, 1),
popSize = 50, maxiter = 1000, run = 100,
crossover = crossovers[i]
)
if (best < GA@fitnessValue) {
idx <- crossovers[i]
best <- GA@fitnessValue
}
results[i] <- GA@solution
}
idx
idx <- 0
name <- 0
best <- 0
#We train them all and then we select the best
for (i in 1:length(crossovers)) {
GA <- ga(type = "real-valued",
fitness =  function(x) f(x[1], x[2]),
lower = c(-1, -1), upper = c(1, 1),
popSize = 50, maxiter = 1000, run = 100,
crossover = crossovers[i]
)
if (best < GA@fitnessValue) {
idx <- i
best <- GA@fitnessValue
}
results[i] <- GA@solution
}
```{r summary, echo = T}
result
results
solution = results[idx]
plot(GA)
summary(GA)
solution
GA@solution
GA@solution[1,]
GA@solution[,1]
solution = results[idx]
plot(GA)
summary(GA)
max_x = as.vector(GA@solution[,1])
max_y = as.vector(GA@solution[,2])
max_z = as.vector(f(GA@solution[,1], GA@solution[,2]))
{res <- persp(x = x, y = x, z = z,theta = 30, phi = 25)
points(trans3d(max_x, max_y, max_z, pmat=res))}
