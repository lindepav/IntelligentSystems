time[i] <- proc.time() - ptm
size[i] = 10+i*5
}
for (i in 1:1) {
ptm <- proc.time()
GA3 <- ga(type = "real-valued",
fitness =  function(x) f(x[1], x[2]),
lower = c(-1, -1), upper = c(1, 1),
popSize = 50, maxiter = 50, run = 100)
time[i] <- proc.time() - ptm
size[i] = 10+i*5
i
}
for (i in 1:1) {
ptm <- proc.time()
GA3 <- ga(type = "real-valued",
fitness =  function(x) f(x[1], x[2]),
lower = c(-1, -1), upper = c(1, 1),
popSize = 50, maxiter = 50, run = 100)
time[i] <- proc.time() - ptm
size[i] = 10+i*5
i
}
for (i in 1:1) {
i
ptm <- proc.time()
GA3 <- ga(type = "real-valued",
fitness =  function(x) f(x[1], x[2]),
lower = c(-1, -1), upper = c(1, 1),
popSize = 50, maxiter = 50, run = 100)
time[i] <- proc.time() - ptm
size[i] = 10+i*5
}
for (i in 1:1) {
print(i)
ptm <- proc.time()
GA3 <- ga(type = "real-valued",
fitness =  function(x) f(x[1], x[2]),
lower = c(-1, -1), upper = c(1, 1),
popSize = 50, maxiter = 50, run = 100)
time[i] <- proc.time() - ptm
size[i] = 10+i*5
}
for (i in 1:1) {
ptm <- proc.time()
GA3 <- ga(type = "real-valued",
fitness =  function(x) f(x[1], x[2]),
lower = c(-1, -1), upper = c(1, 1),
popSize = 50, maxiter = 50, run = 100)
time[i] <- proc.time() - ptm
size[i] = 10+i*5
print(i)
}
for (i in 1:1) {
ptm <- proc.time()
GA3 <- ga(type = "real-valued",
fitness =  function(x) f(x[1], x[2]),
lower = c(-1, -1), upper = c(1, 1),
popSize = 50, maxiter = 50, run = 100)
time[i] <- proc.time() - ptm
print(i)
size[i] = 10+i*5
}
size = c()
time = c()
size = c()
time = c()
size = c()
time = c()
size = c()
```{r gen, echo=TRUE}
for (i in 1:1) {
ptm <- proc.time()
GA3 <- ga(type = "real-valued",
fitness =  function(x) f(x[1], x[2]),
lower = c(-1, -1), upper = c(1, 1),
popSize = 50, maxiter = 50, run = 100)
print(i)
time[i] <- proc.time() - ptm
size[i] = 10+i*5
}
for (i in 1:1) {
ptm <- proc.time()
GA3 <- ga(type = "real-valued",
fitness =  function(x) f(x[1], x[2]),
lower = c(-1, -1), upper = c(1, 1),
popSize = 50, maxiter = 50, run = 100)
print(i)
time[i] <- proc.time() - ptm
print(i)
size[i] = 10+i*5
}
time = c()
size = c()
time = c()
size = c()
```{r gen, echo=TRUE}
for (i in 1:1) {
ptm <- proc.time()
GA3 <- ga(type = "real-valued",
fitness =  function(x) f(x[1], x[2]),
lower = c(-1, -1), upper = c(1, 1),
popSize = 50, maxiter = 50, run = 100)
print(i)
time[i] = proc.time() - ptm
print(i)
size[i] = 10+i*5
}
for (i in 1:1) {
ptm <- proc.time()
GA3 <- ga(type = "real-valued",
fitness =  function(x) f(x[1], x[2]),
lower = c(-1, -1), upper = c(1, 1),
popSize = 50, maxiter = 50, run = 100)
print(i)
time[i] <- proc.time() - ptm
print(i)
size[i] <- 10+i*5
}
for (i in 1:1) {
ptm <- proc.time()
GA3 <- ga(type = "real-valued",
fitness =  function(x) f(x[1], x[2]),
lower = c(-1, -1), upper = c(1, 1),
popSize = 50, maxiter = 50, run = 100)
print(i)
time[i] = proc.time() - ptm
print(i)
size[i] = 10+i*5
}
for (i in 1:1) {
ptm <- proc.time()
GA3 <- ga(type = "real-valued",
fitness =  function(x) f(x[1], x[2]),
lower = c(-1, -1), upper = c(1, 1),
popSize = 50, maxiter = 50, run = 100)
print(i)
time[i] <- proc.time() - ptm
print(i)
size[i] <- 10+i*5
}
for (i in 1:1) {
ptm <- proc.time()
GA3 <- ga(type = "real-valued",
fitness =  function(x) f(x[1], x[2]),
lower = c(-1, -1), upper = c(1, 1),
popSize = 50, maxiter = 50, run = 100)
print(i)
#time[i] <- proc.time() - ptm
print(i)
size[i] <- 10+i*5
}
for (i in 1:1) {
ptm <- proc.time()
GA3 <- ga(type = "real-valued",
fitness =  function(x) f(x[1], x[2]),
lower = c(-1, -1), upper = c(1, 1),
popSize = 10+i*5, maxiter = 50, run = 100)
print(proc.time() - ptm)
time[i] <- proc.time() - ptm
size[i] <- 10+i*5
}
print(proc.time())
for (i in 1:1) {
ptm <- proc.time()
GA3 <- ga(type = "real-valued",
fitness =  function(x) f(x[1], x[2]),
lower = c(-1, -1), upper = c(1, 1),
popSize = 10+i*5, maxiter = 50, run = 100)
print(proc.time())
time[i] <- proc.time() - ptm
size[i] <- 10+i*5
}
for (i in 1:1) {
ptm <- proc.time()
GA3 <- ga(type = "real-valued",
fitness =  function(x) f(x[1], x[2]),
lower = c(-1, -1), upper = c(1, 1),
popSize = 10+i*5, maxiter = 50, run = 100)
print(proc.time()[1])
time[i] <- proc.time() - ptm
size[i] <- 10+i*5
}
for (i in 1:1) {
ptm <- proc.time()
GA3 <- ga(type = "real-valued",
fitness =  function(x) f(x[1], x[2]),
lower = c(-1, -1), upper = c(1, 1),
popSize = 10+i*5, maxiter = 50, run = 100)
elapsed = proc.time() - ptm
print(elapsed[3])
time[i] <- proc.time() - ptm
size[i] <- 10+i*5
}
for (i in 1:1) {
ptm <- proc.time()
GA3 <- ga(type = "real-valued",
fitness =  function(x) f(x[1], x[2]),
lower = c(-1, -1), upper = c(1, 1),
popSize = 10+i*5, maxiter = 50, run = 100)
elapsed = proc.time() - ptm
time[i] <- elapsed[3]
size[i] <- 10+i*5
}
time = c()
size = c()
time = c()
size = c()
```{r gen, echo=TRUE}
for (i in 1:50) {
ptm <- proc.time()
GA3 <- ga(type = "real-valued",
fitness =  function(x) f(x[1], x[2]),
lower = c(-1, -1), upper = c(1, 1),
popSize = 10+i*5, maxiter = 50, run = 100)
elapsed = proc.time() - ptm
time[i] <- elapsed[3]
size[i] <- 10+i*5
}
plot(size, time)
plot(size, time)
genes <- read.csv("DLBCL.csv")
target <- genes$class
splited <- createDataPartition(
y = target,
p = .8,
list = FALSE
)
View(genes)
View(genes)
## Task 2: Genetic feature selection
# 1) Read in the dataset
```{r import, echo=F}
genes <- read.csv("DLBCL.csv")
target <- genes$class
splited <- createDataPartition(
y = target,
p = .8,
list = FALSE,
)
splited
learn = genes[ splited, ]
test = genes[-splited, ]
learn$X <- NULL
test$X <- NULL
learn
length(learn)
sample(learn)
length(sample(learn))
length(learn)
splited <- createDataPartition(
y = target,
p = .8,
list = FALSE,
)
learn = genes[ splited, ]
test = genes[-splited, ]
learn$X <- NULL
test$X <- NULL
learn = sample(learn)
learn = learn[1:1000]
splited <- createDataPartition(
y = target,
p = .8,
list = FALSE,
)
test = genes[-splited, ]
test = genes[-splited, ]
learn$X <- NULL
test = genes[-splited, ]
learn$X <- NULL
test$X <- NULL
learn = learn[1:1000]
length(learn)
ctrl <- trainControl(number = 3,
method = "repeatedcv")
PLSModel <- train(
class ~ .,
data = learn,
method = "pls",
preProc = c("center", "scale"),
trControl = ctrl,
tuneLenght = 1000
)
PLSModel <- train(
class ~ .,
data = learn,
method = "pls",
preProc = c("center", "scale"),
trControl = ctrl,
tuneLenght = 1000
)
RFModel <- train(
class ~ .,
data = learn,
method = "rf",
preProc = c("center", "scale"),
trControl = ctrl,
tuneLenght = 1000
)
PLSModel <- train(
class ~ .,
data = learn,
method = "pls",
preProc = c("center", "scale"),
trControl = ctrl,
tuneLenght = 1000
)
RFModel <- train(
class ~ .,
data = learn,
method = "rf",
preProc = c("center", "scale"),
trControl = ctrl,
tuneLenght = 1000
)
xgbModel <- train(
class ~ .,
data = learn,
method = "xgbDART",
preProc = c("center", "scale"),
trControl = ctrl,
tuneLenght = 100
)
SVMModel <- train(
class ~ .,
data = learn,
method = "svmRadial",
preProc = c("center", "scale"),
trControl = ctrl,
tuneLenght = 1000
)
models_compare <- resamples(list(RF=RFModel, XGBDART=xgbModel, PLS=PLSModel, SVM=SVMModel))
summary(models_compare)
varimp <- varImp(RFModel)
imp <- varimp$importance
plot(varimp, top = 15)
plsClasses <- predict(xgbModel, newdata = test)
str(plsClasses)
plsProbs <- predict(xgbModel, newdata = test, type = "prob")
head(plsProbs)
langth(test)
length(test)
confusionMatrix(data = plsClasses, test$class)
control <- rfeControl(functions = rfFuncs,
method = "repeatedcv",
number = 3,
verbose = FALSE)
outcomeName <- 'class'
predictors <- names(learn)[!names(learn) %in% outcomeName]
results <- rfe(learn[,predictors], learn[,outcomeName], rfeControl=control,
sizes = c(1, 2, 4, 6, 8, 12, 16, 20, 32, 64, 128, 256, 512, 1000))
results <- rfe(learn[,predictors], learn[,outcomeName], rfeControl=control,
sizes = c(1, 2, 4, 6, 8, 12, 16, 20, 32, 64, 128, 256, 512, 1000))
results
predictors(results)
plot(results)
result <- genes[, predictors(results)]
topCor <- data.frame(imp)
topCor$Vars <- row.names(topCor)
topCor <- topCor[order(-topCor$Overall),][1:20,]$Vars
cors <- genes[, topCor]
correlation <- head(round(cor(result, cors),2))
correlation
corrplot(correlation, method="color")
correlation
corrplot(correlation, method="color")
summary(models_compare)
varimp <- varImp(PLSModel)
imp <- varimp$importance
varimp <- varImp(PLSModel)
imp <- varimp$importance
plot(varimp, top = 15)
plsClasses <- predict(xgbModel, newdata = test)
str(plsClasses)
plsProbs <- predict(xgbModel, newdata = test, type = "prob")
head(plsProbs)
test
test
dim(test)
plsProbs
plsProbs
confusionMatrix(data = plsClasses, test$class)
RF
RF
RFModel
RFModel$results
RFModel$finalModel
control <- rfeControl(functions = rfFuncs,
method = "repeatedcv",
number = 3,
verbose = FALSE)
outcomeName <- 'class'
predictors <- names(learn)[!names(learn) %in% outcomeName]
results <- rfe(learn[,predictors], learn[,outcomeName], rfeControl=control,
sizes = c(1, 2, 4, 6, 8, 12, 16, 20, 32, 64, 128, 256, 512, 1000))
results
predictors(results)
plot(results)
predictors
learn[,predictors]
# BONUS: Plot the trace of evolution
history_x = c()
history_y = c()
for (i in 1:12) {
GA2 <- ga(type = "real-valued",
fitness =  function(x) f(x[1], x[2]),
lower = c(-1, -1), upper = c(1, 1),
popSize = 50, maxiter = 50*i, run = 100)
history_x[i] <- GA2@solution[,1]
history_y[i] <- GA2@solution[,2]
}
results
results
results$results
results$result
results
predict(results)
predict(results, newdata = test)
predict(results, newdata = test, type = "prob")
predict(results, newdata = test, type = "prob")
plsProbs
results
results$bestSubset
results$pred
results$variables
result <- genes[, predictors(results)]
result
genes[, results$variables]
results$variables
results$optVariables
genes[, results$Optvariables]
predictors(results)
genes[, results$Optvariables]
genes[, predictors(results)]
predictors(results)
results$Optvariables
results$Optvariables
results$optVariables
genes[, results$optVariables]
#result <- genes[, predictors(results)]
result <- genes[, results$optVariables]
topCor <- data.frame(imp)
topCor$Vars <- row.names(topCor)
topCor <- topCor[order(-topCor$Overall),][1:20,]$Vars
cors <- genes[, topCor]
correlation <- head(round(cor(result, cors),2))
correlation
corrplot(correlation, method="color")
corrplot(correlation, method="color")
#result <- genes[, predictors(results)]
result <- genes[, results$optVariables]
topCor <- data.frame(imp)
topCor$Vars <- row.names(topCor)
topCor <- topCor[order(-topCor$Overall),][1:20,]$Vars
cors <- genes[, topCor]
correlation <- head(round(cor(result, cors),2))
correlation
corrplot(correlation, method="color")
result <- genes[, predictors(results)]
#result <- genes[, results$optVariables]
topCor <- data.frame(imp)
topCor$Vars <- row.names(topCor)
topCor <- topCor[order(-topCor$Overall),][1:20,]$Vars
cors <- genes[, topCor]
correlation <- head(round(cor(result, cors),2))
correlation
corrplot(correlation, method="color")
result <- genes[, predictors(results)]
topCor <- data.frame(imp)
topCor$Vars <- row.names(topCor)
topCor <- topCor[order(-topCor$Overall),][1:20,]$Vars
correlation <- head(round(cor(result, cors),2))
correlation
corrplot(correlation, method="color")
predictors <- names(learn)[!names(learn) %in% outcomeName]
result <- genes[, predictors(results)]
topCor <- data.frame(imp)
topCor$Vars <- row.names(topCor)
topCor <- topCor[order(-topCor$Overall),][1:20,]$Vars
cors <- genes[, topCor]
correlation <- head(round(cor(result, cors),2))
correlation
corrplot(correlation, method="color")
result <- genes[, predictors(results)]
models_compare
topCor
summary(results)
predictors(results)
plot(results)
### Compare the final result (set of features) with the same number of features, that correlate the most with the target variable
```{r cor, echo=TRUE}
result <- genes[, predictors(results)]
topCor <- data.frame(imp)
topCor$Vars <- row.names(topCor)
topCor <- topCor[order(-topCor$Overall),][1:20,]$Vars
cors <- genes[, topCor]
correlation <- head(round(cor(result, cors),2))
corrplot(correlation, method="color")
```
plot(results)
library(corrplot)
### Compare the final result (set of features) with the same number of features, that correlate the most with the target variable
```{r cor, echo=TRUE}
result <- genes[, predictors(results)]
topCor <- data.frame(imp)
topCor$Vars <- row.names(topCor)
topCor <- topCor[order(-topCor$Overall),][1:20,]$Vars
cors <- genes[, topCor]
correlation <- head(round(cor(result, cors),2))
corrplot(correlation, method="color")
```
